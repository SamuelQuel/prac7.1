#include <SPI.h>			// incluye libreria bus SPI
#include <MFRC522.h>			// incluye libreria especifica para MFRC522
#include <LiquidCrystal_I2C.h>
#include <Servo.h>//Ingreso libreria

#define RST_PIN  9			// constante para referenciar pin de reset
#define SS_PIN  10			// constante para referenciar pin de slave select

int buzzer = 6;
int Led_1 = 7;
int Led_2 = 4;

MFRC522 mfrc522(SS_PIN, RST_PIN);	// crea objeto mfrc522 enviando pines de slave select y reset
LiquidCrystal_I2C PantallaLCD(0x27, 16, 2);
Servo servo;//Asigno el servo

byte LecturaUID[4]; 				// crea array para almacenar el UID leido
byte Usuario1[4]= {0x92, 0xDD, 0x67, 0x21} ;    // UID de tarjeta leido en programa 1
byte Usuario2[4]= {0xE3, 0x35, 0xDC, 0x1B} ;    // UID de tarjeta leido en programa 2
byte Usuario3[4]= {0xB2, 0x54, 0x9E, 0x1C} ;    // UID de tarjeta leido en programa 3

void setup() {
  Serial.begin(9600);			// inicializa comunicacion por monitor serie a 9600 bps
  pinMode(buzzer, OUTPUT);//determinamos estado del pin
  pinMode(Led_1, OUTPUT);
  pinMode(Led_2, OUTPUT);
  pinMode(A0, OUTPUT);
  servo.attach(3);//Asigno el pin del servo
  servo.write(0);
  SPI.begin();				// inicializa bus SPI
  mfrc522.PCD_Init();			// inicializa modulo lector
  PantallaLCD.clear();
  PantallaLCD.setCursor(0, 0);//numerios visibles del LCD
  PantallaLCD.print("Listo");		// Muestra texto Listo
  PantallaLCD.init();
  PantallaLCD.backlight();
}

void loop() {
  if ( ! mfrc522.PICC_IsNewCardPresent())		// si no hay una tarjeta presente
    return;						// retorna al loop esperando por una tarjeta
  
  if ( ! mfrc522.PICC_ReadCardSerial()) 		// si no puede obtener datos de la tarjeta
    return;						// retorna al loop esperando por otra tarjeta
    

    for (byte i = 0; i < mfrc522.uid.size; i++) {	// bucle recorre de a un byte por vez el UID
      if (mfrc522.uid.uidByte[i] < 0x10){		// si el byte leido es menor a 0x10
        Serial.print(" 0");				// imprime espacio en blanco y numero cero
        }
        else{						// sino

          }
             	// imprime el byte del UID leido en hexadecimal
          LecturaUID[i]=mfrc522.uid.uidByte[i];   	// almacena en array el byte del UID leido      
          }
          

                    
          if(comparaUID(LecturaUID, Usuario1)){// llama a funcion comparaUID con Usuario1
            PantallaLCD.clear();
            PantallaLCD.setCursor(0, 0);
            PantallaLCD.print("Bienvenido");	// si retorna verdadero muestra texto bienvenida
            PantallaLCD.setCursor(0, 1);
            PantallaLCD.print("Usuario 1");	// si retorna verdadero muestra texto bienvenida
            activaled1();
            servo.write(360);
            activateAlarm();//activacion de el buzzer
            servo.write(0);
            activaledoff();           
            PantallaLCD.clear();
          }		
            
          else if(comparaUID(LecturaUID, Usuario2)){// llama a funcion comparaUID con Usuario2
            PantallaLCD.clear();
            PantallaLCD.setCursor(0, 0);
            PantallaLCD.print("Bienvenido");	// si retorna verdadero muestra texto bienvenida
            PantallaLCD.setCursor(0, 1);
            PantallaLCD.print("Usuario 2");	// si retorna verdadero muestra texto bienvenida
            activaled1();
            servo.write(360);
            activateAlarm();//activacion de el buzzer
            servo.write(0);
            activaledoff();           
            PantallaLCD.clear();

          }	

          else if(comparaUID(LecturaUID, Usuario3)){	// llama a funcion comparaUID con Usuario3
            PantallaLCD.clear();
            PantallaLCD.setCursor(0, 0);
            PantallaLCD.print("Bienvenido");	// si retorna verdadero muestra texto bienvenida
            PantallaLCD.setCursor(0, 1);
            PantallaLCD.print("Usuario 3");	// si retorna verdadero muestra texto bienvenida
            activaled1();
            servo.write(360);
            activateAlarm();//activacion de el buzzer
            servo.write(0);
            activaledoff();           
            PantallaLCD.clear();
          }
            
           else{
            PantallaLCD.clear();
            PantallaLCD.setCursor(0, 0);
            PantallaLCD.print("Usuario no");	// si retorna verdadero muestra texto bienvenida
            PantallaLCD.setCursor(0, 1);
            PantallaLCD.print("Autorizado");	// si retorna verdadero muestra texto bienvenida
            activaled2(); 
            activateAlarm2();
            activaledooff();
            PantallaLCD.clear();
 
           }						// si retorna falso

              mfrc522.PICC_HaltA();  		// detiene comunicacion con tarjeta                  
                                  
}



boolean comparaUID(byte lectura[],byte usuario[])	// funcion comparaUID
{
  for (byte i=0; i < mfrc522.uid.size; i++){		// bucle recorre de a un byte por vez el UID
  if(lectura[i] != usuario[i])				// si byte de UID leido es distinto a usuario
    return(false);					// retorna falso
  }
  return(true);						// si los 4 bytes coinciden retorna verdadero
}

void activateAlarm() {//funcion buzzer
  tone(buzzer, 330 , 5000);//tono de buzzer
  delay(1000);//tiempo del buzzer
  tone(buzzer, 392, 5000);//tono de buzzer
  delay(1000);//tiempo del buzzer
  tone(buzzer, 330, 5000);//tono de buzzer
  delay(1000);//tiempo del buzzer
  tone(buzzer, 294, 5000);//tono de buzzer
  delay(1000);//tiempo del buzzer
  tone(buzzer, 247 , 5000);//tono de buzzer
  delay(1000);//tiempo del buzzer
  tone(buzzer, 262, 5000);//tono de buzzer
  delay(1000);//tiempo del buzzer
  tone(buzzer, 294, 5000);//tono de buzzer
  delay(1000);//tiempo del buzzer
  tone(buzzer, 247, 5000);//tono de buzzer
  delay(1000);//tiempo del buzzer
  noTone(buzzer);//no tone
}

void activateAlarm2() {//funcion buzzer
  tone(buzzer, 1000, 5000);//tono de buzzer
  delay(1000);//tiempo del buzzer
  tone(buzzer, 500, 5000);//tono de buzzer
  delay(1000);//tiempo del buzzer
  tone(buzzer, 250, 5000);//tono de buzzer
  delay(1000);//tiempo del buzzer
  tone(buzzer, 500, 5000);//tono de buzzer
  delay(1000);//tiempo del buzzer
  noTone(buzzer);//no tone
}

void activaled1() {//funcion buzzer
 digitalWrite(Led_1, HIGH); // Enciende el LED
}

void activaledoff() {//funcion buzzer
 digitalWrite(Led_1, LOW); // Enciende el LED
}

void activaled2() {//funcion buzzer
 digitalWrite(Led_2, HIGH); // Enciende el LED
}

void activaledooff() {//funcion buzzer
 digitalWrite(Led_2, LOW); // Enciende el LED
}
